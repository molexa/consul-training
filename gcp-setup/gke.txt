PROJECT=$(gcloud config get project)

gcloud container --project "$PROJECT" clusters create-auto "test-cluster" --region "europe-north1" --release-channel "regular" --network "projects/$PROJECT/global/networks/default" --subnetwork "projects/$PROJECT/regions/europe-north1/subnetworks/default" --cluster-ipv4-cidr "/21"

IP_RANGE=$(gcloud container clusters describe test-cluster --format=get"(clusterIpv4Cidr)" --region="europe-north1" --project=$PROJECT)
gcloud compute firewall-rules create "test-cluster-to-all-vms-on-network" --network=default --source-ranges=$IP_RANGE --allow=tcp,udp,icmp --project=$PROJECT

gcloud container clusters get-credentials test-cluster --location europe-north1

##################
AGENT_TOKEN="cb84f686-b5bd-4e7b-684d-e250e3b4b333"
ENCRYPT="sT8+VS42pwKhwgHt8AUig4lRZ2uKfaiDAIkMRgHZNjM="

consul_deployment.yaml:

apiVersion: apps/v1
kind: Deployment
metadata:
  name: consul-agent
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consul-agent
  template:
    metadata:
      labels:
        app: consul-agent
    spec:
      containers:
      - name: consul-agent
        image: hashicorp/consul:latest
        ports:
        - containerPort: 8500
        args: ["agent", "-client", "0.0.0.0", "-retry-join", "10.166.0.20", "-config-file", "/consul/myconfig/config.json"]
        volumeMounts:
        - name: consul-config
          mountPath: /consul/myconfig
        - name: consul-data
          mountPath: /consul/data
      volumes:
      - name: consul-config
        configMap:
          name: consul-config
          items:
          - key: config.json
            path: config.json
          - key: ca.pem
            path: ca.pem
      - name: consul-data
        emptyDir: {}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: consul-config
data:
  config.json: |-
    {
      "encrypt" : "sT8+VS42pwKhwgHt8AUig4lRZ2uKfaiDAIkMRgHZNjM=",
      "acl": {
        "enabled": true,
        "default_policy": "deny",
        "enable_token_persistence" : true,
        "tokens" : {
          "agent" : "138ad8d7-25b9-d7ff-5017-82d88606313d"
        }
      },
      "ca_file": "/consul/myconfig/ca.pem",
      "verify_incoming": false,
      "verify_outgoing": true,
      "verify_server_hostname": true,
      "auto_encrypt" : {
        "tls" : true
      }
    }
  ca.pem: |-
    -----BEGIN CERTIFICATE-----
    MIIC7jCCApOgAwIBAgIQTpMms10ssUFr9316LLnKCzAKBggqhkjOPQQDAjCBuTEL
    MAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1TYW4gRnJhbmNpc2Nv
    MRowGAYDVQQJExExMDEgU2Vjb25kIFN0cmVldDEOMAwGA1UEERMFOTQxMDUxFzAV
    BgNVBAoTDkhhc2hpQ29ycCBJbmMuMUAwPgYDVQQDEzdDb25zdWwgQWdlbnQgQ0Eg
    MTA0NDQzODM2MjUxNjcwMjIyMjc5ODE3MjY1NTQwNTg5Mjc1NjU5MB4XDTIzMTEx
    OTE3MzgxMFoXDTI4MTExNzE3MzgxMFowgbkxCzAJBgNVBAYTAlVTMQswCQYDVQQI
    EwJDQTEWMBQGA1UEBxMNU2FuIEZyYW5jaXNjbzEaMBgGA1UECRMRMTAxIFNlY29u
    ZCBTdHJlZXQxDjAMBgNVBBETBTk0MTA1MRcwFQYDVQQKEw5IYXNoaUNvcnAgSW5j
    LjFAMD4GA1UEAxM3Q29uc3VsIEFnZW50IENBIDEwNDQ0MzgzNjI1MTY3MDIyMjI3
    OTgxNzI2NTU0MDU4OTI3NTY1OTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABDAP
    sib/ySicHN8VubHG0rsOjGIetLMieW5E7cN+WzavXzexkHoh6mGHYkOJ6CmXLQOB
    hShQLNp5fVONXUXpHwCjezB5MA4GA1UdDwEB/wQEAwIBhjAPBgNVHRMBAf8EBTAD
    AQH/MCkGA1UdDgQiBCCsqKiKImCv3eBMOGk6LwhblwQuOPK8avV7tLkIehiR4zAr
    BgNVHSMEJDAigCCsqKiKImCv3eBMOGk6LwhblwQuOPK8avV7tLkIehiR4zAKBggq
    hkjOPQQDAgNJADBGAiEAq+SoNKIg/OF5hkbEaRTX0SxNN3dRPVCp6XLtOujEZGcC
    IQCbQw5muGXi1zD0IgUNnsZRw6Ln8YQn5nuWjxEUakR3VA==
    -----END CERTIFICATE-----



##################

kubectl create deployment hello-server --image=us-docker.pkg.dev/google-samples/containers/gke/hello-app:1.0

hello_service.yaml:
apiVersion: v1
kind: Service
metadata:
  name: hello-service
  annotations:
    "consul.hashicorp.com/service-name": "hello"
    "consul.hashicorp.com/service-port": "80"
    "consul.hashicorp.com/service-tags": "http"
spec:
  selector:
    app: hello-server
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080

kubectl apply -f hello_service.yaml